# This script is specifically designed for the CETL database.
# Its primary purpose is to update the 'cin' column in the 'users' table.
# It reads the "SIS ID" from a CSV file (generated by the two main scripts)
# and uses it to update the corresponding user's CIN in the database.


import csv
import mysql.connector

# Database connection details
db_config = {
    'host': 'localhost',  # Database host
    'user': 'user',  # Database username
    'password': 'password',  # Database password
    'database': 'database'  # Database name
}


def check_email_exists(cursor, email):
    """
    Check if an email address exists in the 'users' table.

    :param cursor: The MySQL cursor object.
    :param email: The email address to check.
    :return: True if the email exists, False otherwise.
    """
    query = "SELECT COUNT(*) FROM users WHERE email = %s"
    cursor.execute(query, (email,))
    result = cursor.fetchone()
    return result[0] > 0


def get_existing_cin(cursor, email):
    """
    Retrieve the existing CIN value for a given email address.

    :param cursor: The MySQL cursor object.
    :param email: The email address to query.
    :return: The CIN value if it exists, None otherwise.
    """
    query = "SELECT cin FROM users WHERE email = %s"
    cursor.execute(query, (email,))
    result = cursor.fetchone()
    return result[0] if result else None


def update_cin(connection, email, cin):
    """
    Update the CIN value for a given email address in the 'users' table.

    :param connection: The MySQL connection object.
    :param email: The email address for which to update the CIN.
    :param cin: The new CIN value.
    :return: True if the update was successful, False otherwise.
    """
    try:
        cursor = connection.cursor()

        # Check if the email exists in the users table
        if not check_email_exists(cursor, email):
            print(f"Email {email} does not exist in the users table.")
            return False

        # Retrieve the existing CIN value for comparison
        existing_cin = get_existing_cin(cursor, email)

        # If the existing CIN matches the new CIN, no update is needed
        if existing_cin == cin:
            print(f"CIN for {email} is already up to date.")
            return True

        # Update the CIN value in the database
        update_query = """
        UPDATE users 
        SET cin = %s 
        WHERE email = %s
        """
        cursor.execute(update_query, (cin, email))
        connection.commit()

        print(f"Updated CIN for {email}")
        return True

    except mysql.connector.Error as error:
        print(f"Error updating CIN for {email}: {error}")
    finally:
        cursor.close()

    return False


def main():
    """
    Main function to process the CSV file and update CIN values in the database.
    """
    csv_file = 'teachers.csv'  # Path to the CSV file
    mismatched_records = []  # List to keep track of records that couldn't be updated
    processed_count = 0  # Counter for successfully processed records
    total_records = 0  # Counter for total records read from the CSV file

    try:
        # Establish a connection to the MySQL database
        connection = mysql.connector.connect(**db_config)

        # Open and read the CSV file
        with open(csv_file, 'r') as file:
            csv_reader = csv.DictReader(file)

            # Process each row in the CSV file
            for row in csv_reader:
                total_records += 1
                email = row['Login ID']
                cin = row['SIS ID']

                # Update the CIN value in the database
                if update_cin(connection, email, cin):
                    processed_count += 1
                else:
                    mismatched_records.append(row)

        # Report results
        mismatch_count = len(mismatched_records)
        print(f"\nProcessed {processed_count} out of {total_records} records.")
        print(f"{mismatch_count} records found in CSV but not in the users table:")

        if mismatched_records:
            for record in mismatched_records:
                print(
                    f"Email: {record['Login ID']}, Name: {record['First Name']} {record['Last Name']}, SIS ID: {record['SIS ID']}")
        else:
            print("All records in the CSV file were processed successfully.")

    except FileNotFoundError:
        print(f"CSV file '{csv_file}' not found.")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Ensure the database connection is closed
        if connection.is_connected():
            connection.close()


if __name__ == "__main__":
    main()
